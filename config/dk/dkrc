#!/bin/sh

# example dkrc to show some basic command usage and error reporting

# determine where to place the log file
logfile="$HOME/.dkrc.log"
[ -d "$HOME/.local/share/xorg" ] && logfile="$HOME/.local/share/xorg/dkrc.log"
: >"$logfile"

# (re)load sxhkd for keybinds
if hash sxhkd >/dev/null 2>&1; then
	pkill sxhkd
	sxhkd -c "$HOME/.config/dk/sxhkdrc" &
fi

. ~/.config/dk/color.sh

# autostart
~/bin/autostart &
dbus-launch &

{ # compound command to redirect all output

	# workspace settings
	# ------------------------

	# initialize 10 workspaces (1-10) (default: 1/monitor)
	dkcmd set numws=6
	# dkcmd set ws=_ pad t=20

	# default workspace '_' values used when allocating new workspaces
	# can be applied to all existing workspaces when passed 'apply' after ws=_
	dkcmd set ws=_ apply layout=tile master=1 stack=5 gap=7 msplit=0.55 ssplit=0.5
  dkcmd set ws=5 layout=grid

	# global settings
	# ---------------------

	# focus windows when receiving activation and enable focus-follows-mouse
	dkcmd set focus_open=true focus_urgent=true focus_mouse=false

	# place clients at the tail and ignore size hints on tiled windows
	dkcmd set tile_tohead=0 tile_hints=false

	# minimum width/height for resizing, and minimum allowed on-screen when moving
	dkcmd set win_minwh=50 win_minxy=30

	# disable gaps and borders in single window layouts
	dkcmd set smart_gap=false smart_border=true

	# define mouse mod and move/resize buttons
	dkcmd set mouse mod=super move=button1 resize=button3
	
  # border
  dkcmd set border width=1 outer_width=0 \
		colour \
    focus=$blue \
    unfocus=$grey \
    urgent=$red \
    outer_focus=$base \
    outer_unfocus=$base \
    outer_urgent=$base

	#
	# window rules
	# --------------

	# rule class, instance, and title regexes (*ALWAYS* CASE INSENSITIVE)

	# open window(s) on a specific workspace (assigned monitor)

	# WS 1
	dkcmd rule \
		class="(kitty|Zathura|firefox*|[Nn]avigator|\b[Cc]hromium\b)" \
		ws=1 focus=true
	
	# WS 2
	dkcmd rule \
		class="([Cc]ode|DesktopEditors|glrnvim)" \
		ws=2 focus=true

	# WS 3
	dkcmd rule \
		class="(\b[Nn]autilus\b|[Nn]emo|Motrix|qBittorrent|[Kk]rita|[Gg]imp*|\b[Gg]ithub\b)" \
		ws=3 focus=true

	# WS 4
	dkcmd rule class="(Minecraft*|bottles|[Gg]ame*)" ws=4 focus=true
  dkcmd rule class="(\btlauncher\b)" ws=4 float=true
	
	# WS 5
	dkcmd rule \
		class="(\bOBS\b|\bDejaDup\b|[Ff]ont-manager|\bFlatseal\b|btop|Lxappearance|Kvantum\ Manager|Firewall-config|[Aa]randr)" \
		ws=5 focus=true
	
	# WS 6
	dkcmd rule class="(\bcelluloid\b|Stremio|nuclear|moosync)" \
		ws=6 focus=true

	# Floaters
	dkcmd rule \
		class="(Nitrogen|xdg-desktop-portal-gnome|copyq|pulsemixer|nmtui|[Nn]m-connection-editor)" \
		float=true focus=true stick=true y=25 x=center
	dkcmd rule title="(^Library$|^Pick$)" float=true focus=true

	# scratchpads
	dkcmd rule class="(musikcube)" w=800 h=800 float=true focus=true stick=true x=center y=center
	dkcmd rule class="(dropdown|note)" w=900 h=700 float=true focus=true stick=true x=center y=center

	# open window(s) and use a callback function (user defined in config.h)
	# we also ignore=true to stop the window from being resized on it's own from events
	# eg. mpv --x11-name=albumart /path/to/media
	dkcmd rule class="^mpv$" instance="^albumart$" float=true ignore=true callback=albumart bw=0

	# apply current rule set to all existing windows
	dkcmd rule apply '*'

	# delete all rules
	# dkcmd rule remove '*'

} >>"$logfile" 2>&1 # append responses

# inform of any errors in a notification
if grep -q 'error:' "$logfile"; then
	hash notify-send && notify-send -t 0 -u critical "dkrc has errors" \
		"$(awk '/error:/ {sub(/^error: /, ""); gsub(/</, "\<"); print}' "$logfile")"
	exit 1
fi

exit 0
